@startuml
skinparam linetype polyline
skinparam linetype ortho
set separator none
left to right direction

Game <|-- Main

Screen <|.[norank].  HomeScreen
Screen <|.[norank]. LevelSelectorScreen
Screen <|.[norank]. LevelRenderer
Screen <|.[norank]. LevelScreen
Screen <|.[norank]. LoseScreen
Screen <|.[norank]. WinScreen

Drawable <|-[norank]-  Material
Drawable <|-[norank]- Slingshot
Drawable <|-[norank]- Pig
Drawable <|-[norank]- Bird

Main *-- HomeScreen
Main *-- LevelSelectorScreen
Main *-- WinScreen
Main *-- LoseScreen
Main "1" *-- "*" LevelRenderer
Main "1" *-- "*" LevelScreen

LevelScreen -- LevelRenderer

LevelRenderer "1" *-- "*" Material
LevelRenderer "1" *-- "*" Pig
LevelRenderer "1" *-- "*" Bird
LevelRenderer *-- Slingshot

interface Screen {
+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

note bottom of Screen: Pratyush Gangwar (2023395), Ramanujan Gopalan (2023424)

class Game {
+getScreen() : Screen
+setScreen( screen : Screen ) : void

+render() : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+dispose() : void
}

class Main {
- homeScreen : HomeScreen
- levelSelectorScreen : LevelSelectorScreen
- winScreen : WinScreen
- loseScreen : LoseScreen
- levelRendererList : List<LevelRenderer>
- levelScreenList : List<LevelScreen>

+changeScreen(screen : Screens) : void
+changeLevel(level : int) : void

+getLevelSelectorScreen() : LevelScreenScreen
+getLevelScreenList() : List<LevelScreen>

+create() : void
+render() : void
}

class HomeScreen {
-main : Main
-stage : Stage
-table : Table
-musicDialog : Dialog
-exitDialog : Dialog
-wasHidden : boolean

+HomeScreen(main : Main)
+getStage() : Stage

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

class LevelSelectorScreen{
-main : Main
-stage : Stage
-table : Table
-wasHidden : boolean
-lastCompleted : int

+LevelSelectorScreen(main : Main)
+getStage() : Stage
+incrementLastCompleted() : void
-updateLevelStatus() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}


class LevelScreen {
- SCALE : float = 1

- levelRenderer : LevelRenderer
- isComplete : boolean

- camera : OrthographicCamera
- viewport : Viewport

- tmr : OrthogonalTiledMapRenderer
- map : TiledMap

- b2dr : Box2DDebugRenderer
- world : World

- batch : SpriteBatch
- background_tex : Texture

- iceBlocks : ArrayList<Material>
- woodBlocks : ArrayList<Material>
- stoneBlocks : ArrayList<Material>

- slingShot : SlingShot

- birds1 : ArrayList<Bird>
- birds2 : ArrayList<Bird>
- birds3 : ArrayList<Bird>

- smallPigs : ArrayList<Pig>
- mediumPigs : ArrayList<Pig>
- largePigs : ArrayList<Pig>

+LevelScreen(tilemapPath : String)
+setLevelRenderer( levelRenderer : levelRenderer ) : void
+sleepBodies() : void
+wakeBodies() : void
+isComplete() : boolean
+setComplete( isComplete : boolean ) : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void

+update( delta : float ) : void
}

Class LevelRenderer {
-main : Main
-stage : Stage
-mainTable : Table
-pauseTable : Table
-musicDialog : Dialog
-exitDialog : Dialog
-wasHidden : boolean
-isPaused : boolean
-levelScreen : LevelScreen

+LevelRenderer(main : Main, levelScreen : LevelScreen)
+getStage() : Stage
+isPaused() : boolean

-setTransparentBackground() : void
-setupPauseMenu() : void
-setupMainTable() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

class LoseScreen {
-main : Main
-stage : Stage
-table : Table
-background : Texture
-duration : float

+LoseScreen(main : Main)
+getStage() : Stage
-setupTable() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

class WinScreen {
-main : Main
-stage : Stage
-table : Table
-background : Texture
-duration : float

+WinScreen(main : Main)
+getStage() : Stage
-setupTable() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

enum Screens {
    HOMESCREEN,
    LEVELRENDERER,
    LEVELSELECTORSCREEN,
    LOSESCREEN,
    WINSCREEN
}

abstract class Drawable {
# body : Body
# sprite : Sprite
- w : float
- h : float

+Drawable(body : Body, w : float, h : float)
+abstract render(batch : SpriteBatch)  : void
+abstract update()  : void

+getBody() : Body
+getSprite() : Sprite
}

class Material {
+Material(body : Body, w : float, h : float, type : int)
+update() : void
}


class Bird {
+Bird(body : Body, w : float, h : float, type : int)
+update() : void
}

class Pig {
+Material(body : Body, w : float, h : float)
+update() : void
}

class Slingshot {
+Slingshot(body : Body, w : float, h : float)
+update() : void
}

class Constants {
+static PPM : float = 32
+static WORLD_WIDTH : int = 1280
+static WORLD_HEIGHT : int = 720
}

class Scene2DUtils {
-static backgroundTexture : Texture
+static skin : Skin
+static buttonWidth : int = 300
+static paddingSpace : int = 10
+static scene2DDebugEnabled : boolean = false
+static music : Music

+static setBackgroundTexture(file : String) : void
+static setSkin(file : String) : void
+static setMusic(file : String) : void
+static setBackgroundOfTable(table : Table) : void
+static makeLabel(text : String, fontSize : int) : Label
+static makeExitWindow() : Dialog
+static makeMusicControlWindow() : Dialog
}

class TiledMapUtil {
+static parseSlingShot(world : World, objects : MapObjects, isStatic : boolean) : SlingShot
+static parseBoundary(world : World, objects : MapObjects, isStatic : boolean) : void
+static parseMaterial(world : World, objects : MapObjects, type : int) : ArrayList<Material>
+static parsePigs(world : World, objects : MapObjects, isStatic : boolean, type : int) : ArrayList<Pig>
+static parseBird(world : World, objects : MapObjects, type : int) : ArrayList<Bird>
+static createPolygonShape(polygonObject : PolygonMapObject) : PolygonShape
-static createChainShape(polyline : PolylineMapObject) : ChainShape
}

@enduml
