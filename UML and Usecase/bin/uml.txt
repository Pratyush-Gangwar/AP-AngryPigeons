@startuml
skinparam linetype polyline
skinparam linetype ortho
set separator none
left to right direction

Game <|-- Main

Screen <|..  HomeScreen
Screen <|.. LevelSelectorScreen
Screen <|.. LevelRenderer
Screen <|.. LevelScreen
Screen <|.. LoseScreen
Screen <|.. WinScreen

InputProcessor <|.. LevelRenderer
ContactListener <|.. LevelContactListener

Drawable <|-- Killable
Killable <|-- Material
Killable <|-- Pig
Drawable <|-- Slingshot
Drawable <|-- Bird

Exception <|-- DrawableNotFoundException
Exception <|-- TileMapNotFoundException

TileMapNotFoundException <.. LevelScreen : <<throws>>
DrawableNotFoundException <.. Material : <<throws>>
DrawableNotFoundException <.. Pig : <<throws>>
DrawableNotFoundException <.. Bird : <<throws>>

Main "1" *-- "*" LevelScreen
Main "1" *-- "*" LevelInfo
'Storage <.. Main
'LevelRenderer <.. Main

Main "1" <-- "1" HomeScreen
'Scene2DUtils <.. HomeScreen

Main "1" <-- "1" LevelRenderer
LevelScreen "1" -- "1" LevelRenderer
'Storage <.. LevelRenderer
'Scene2DUtils <.. LevelRenderer


'TiledMapUtil <.. LevelScreen
'Storage <.. LevelScreen
LevelScreen "1" *-- "*" Material
LevelScreen "1" *-- "*" Pig
LevelScreen "1" *-- "*" Bird
LevelScreen "1" *-- "1" Slingshot

Main "1" <-- "1" LevelSelectorScreen
Main "1" <-- "1" LoseScreen
Main "1" <-- "1" WinScreen

Main "1" <-- "1" Storage
Storage "1" *-- "*" SavedLevel

SavedLevel "1" *-- "*" SavedKillable
SavedKillable "1" *-- "1" SavedBody

interface Screen {
+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

note bottom of Screen: Pratyush Gangwar (2023395), Ramanujan Gopalan (2023424)

class Game {
+getScreen() : Screen
+setScreen( screen : Screen ) : void

+render() : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+dispose() : void
}

class LevelInfo {
-birds : ArrayList<Integer>
-tileMapPath : String

+LevelInfo(tileMapPath : String, birds : ArrayList<Integer>)
+getBirds() : ArrayList<Integer>
+setBirds(birds : ArrayList<Integer>) : void
+getTileMapPath() : String
+setTileMapPath(tileMapPath : String) : void
}

class Main {
- levelInfoList : List<LevelInfo>
- levelScreenList : List<LevelScreen>

+changeScreen(screen : Screens) : void
+resetExistingLevelOrCreateNewLevel(index : int) : void
+playNewLevel(index : int) : void
+loadLevel(index : int) : void

+getLevelInfoList() : List<LevelInfo>
+getLevelScreenList() : List<LevelScreen>

+create() : void
+render() : void
+dispose() : void
}

class LevelScreen {
- SCALE : float = 1

- camera : OrthographicCamera
- viewport : Viewport

- tmr : OrthogonalTiledMapRenderer
- map : TiledMap

- b2dr : Box2DDebugRenderer
- world : World

- batch : SpriteBatch
- background_tex : Texture

- materialList : List<Material>

- slingShot : SlingShot
- ssPosition : Vector2
- ssPulled : boolean
- distance : float

- birds : List<Bird>
- birdPointer : int
- currentBird : Bird
- currentBirdPos : Vector3

- pigList : List<Pig>

- win : boolean
- lose : boolean

- score : int

- timeSinceLaunch : float

- timeSinceEnd
- static timeToWaitAfterWinLoseConditionIsMet : float

- timeStep : float
- ffSprite : Sprite
- ffAnimationCnt : int
- ffAnimationFrame : int

+LevelScreen(levelInfo : LevelInfo)
-createLevel() : void
-createRenderers() : void

+load() : void

+sleepBodies() : void
+wakeBodies() : void

-update( delta : float ) : void
-inputUpdate() : void
-physicsUpdate() : void
-updateMaterials() : void
-updatePigs() : void

-draw() : void
-drawKillables( killableList : List<? extends  Killable>  ) : void

+isSsPulled() : boolean
+isWin() : boolean
+isLose() : boolean

+isComplete() : boolean
+setComplete( isComplete : boolean ) : void

+ getScore() : int
+ setScore(score : int) : void

+ getTimeSinceLaunch() : float
+ setTimeSinceLaunch(timeSinceLaunch : float) : void

+getBirdPointer() : int
+setBirdPointer(birdPointer : int) : void

+getCurrentBird() : Bird
+getMaterialList() : List<Material>
+getPigList() : List<Pig>

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void

+touchDown(screenX : int, screenY : int, pointer : int, button : int) : void
+touchDragged(screenX : int, screenY : int, pointer : int) : void
+touchUp(screenX : int, screenY : int, pointer : int, button : int) : void
}

Class LevelRenderer {
-main : Main
-stage : Stage
-mainTable : Table
-pauseTable : Table
-musicDialog : Dialog
-exitDialog : Dialog
-scoreLabel : Label

-wasHidden : boolean
-isPaused : boolean
-hasGameEnded : boolean

-levelScreen : LevelScreen
-static instance : LevelRenderer

-LevelRenderer()
+static getInstance() : void
+setMain(main : Main) : void

-setTransparentBackground() : void
-setupPauseMenu() : void
-setupMainTable() : void

+winLevel() : void
+loseLevel() : void

+getStage() : Stage
+getLevelScreen() : LevelScreen
+setLevelScreen( levelScreen : LevelScreen ) : void
+isPaused() : boolean

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void

+touchDown(screenX : int, screenY : int, pointer : int, button : int) : void
+touchDragged(screenX : int, screenY : int, pointer : int) : void
+touchUp(screenX : int, screenY : int, pointer : int, button : int) : void
+touchCancelled(i : int, i1 : int, i2 : int, i3 : int) : boolean
+keyDown(keycode : int) : boolean
+keyUp(keycode : int) : boolean
+keyTyped(character : char) : boolean
+mouseMoved(screenX : int, screenY : int) : boolean
+scrolled(amountX : float, amountY : float) : boolean
}

class Storage {
- gson : Gson
- main : Main
- savedLevelList : List<SavedLevel>
- path : String
- instance : Storage

+ static getInstance() : Storage
+ setMain(main : Main) : void
- Storage()
+ writeToDisk() : void
+ getOrCreateSavedLevel(levelIdx : int) : SavedLevel
+ saveLevelInMemory(levelScreen : LevelScreen) : void
+ readLevelsFromDisk() : void
+ loadLevelFromMemory(levelScreen : LevelScreen) : void
- saveFileExists() : boolean
+ getSavedLevelList() : List<SavedLevel>
}

class SavedLevel {
- loadingDisabled : boolean
- isComplete : boolean
- birdPointer : int
- savedPigList : List<SavedKillable>
- savedMaterialList : List<SavedKillable>
- score : int

+ SavedLevel()
+ save(levelScreen : LevelScreen) : void
- syncIn(savedKillableList : List<SavedKillable>, killableList : List<? extends Killable>) : void
- syncOut(killableList : List<? extends Killable>, savedKillableList : List<SavedKillable>) : void
+ load(levelScreen : LevelScreen) : void
+ isComplete() : boolean
+ isLoadingDisabled() : boolean
+ setLoadingDisabled(loadingDisabled : boolean) : void
+ setComplete(isComplete : boolean) : void
}

class SavedKillable {
-savedBody : SavedBody
-hp : int
-dead : boolean

+SavedKillable()
+save(killable : Killable) : void
+load(killable : Killable) : void
}

class SavedBody {
-angle : float
-angularVelocity : float
-linearVelocity : Vector2
-position : Vector2

+SavedBody()
+save(body : Body) : void
+load(body : Body) : void
}

abstract class Drawable {
# body : Body
# sprite : Sprite
- w : float
- h : float

+Drawable(body : Body, w : float, h : float)
+render(batch : SpriteBatch)  : void
+update()  : void

+getBody() : Body
+getSprite() : Sprite
}

abstract class Killable {
-hp : int
-dead : boolean

+Killable(body : Body, w : float, h : float)
+isDead() : boolean
+getHp() : int
+damage(dp : int) : void
}

class TileMapNotFoundException {
+TileMapNotFoundException( message : String )
}

class DrawableNotFoundException {
+DrawableNotFoundException( message : String )
}

class Bird {
-waiting: boolean
-dp : int
-type : int
-powerUsed : boolean
+Bird(body : Body, w : float, h : float, type : int)
+update() : void

+isWaiting() : boolean
+setWaiting( waiting : boolean ) : void

+getDp() : int
+power() : void
}

class Pig {
+Pig(body : Body, w : float, h : float, type : int)
}

class Material {
+Material(body : Body, w : float, h : float, type : int)
}

class Slingshot {
+Slingshot(body : Body, w : float, h : float)
+update() : void
}

class HomeScreen {
-main : Main
-stage : Stage
-table : Table
-musicDialog : Dialog
-exitDialog : Dialog
-static instance : HomeScreen

-HomeScreen(main : Main)
+static getInstance(main : Main) : HomeScreen
+getStage() : Stage

-setupTable() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

class LevelSelectorScreen{
-main : Main
-stage : Stage
-table : Table

-static instance : LevelSelectorScreen

-LevelSelectorScreen(main : Main)
+static getInstance(main : Main) : LevelSelectorScreen
+getStage() : Stage

-setupTable() : void
-updateLevelStatus() : void
-levelSelectHandler() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

class LoseScreen {
-main : Main
-stage : Stage
-table : Table
-background : Texture
-duration : float

-static instance : LoseScreen

-LoseScreen(main : Main)
+static getInstance(main : Main) : LoseScreen
+getStage() : Stage
-setupTable() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

class WinScreen {
-main : Main
-stage : Stage
-table : Table
-background : Texture
-duration : float

-static instance : WinScreen

-WinScreen(main : Main)
+static getInstance(main : Main) : WinScreen
+getStage() : Stage
-setupTable() : void

+show() : void
+render( delta : float ) : void
+resize( width : int, height : int ) : void
+pause() : void
+resume() : void
+hide() : void
+dispose() : void
}

enum Screens {
    HOMESCREEN,
    LEVELSELECTORSCREEN,
    LOSESCREEN,
    WINSCREEN
}



class LevelContactListener {
+beginContact(contact : Contact) : void
+endContact(contact : Contact) : void
+preSolve(contact : Contact, oldManifold : Manifold) : void
+postSolve(contact : Contact, impulse : ContactImpulse) : void
}

class Constants {
+static PPM : float = 32
+static WORLD_WIDTH : int = 1280
+static WORLD_HEIGHT : int = 720
+static SS_RADIUS : int = 3
+static MAX_VELOCITY : int = 7
+static STD_DP : int = 10
+static PI : double = 3.14
}

class Scene2DUtils {
-static backgroundTexture : Texture
+static skin : Skin
+static buttonWidth : int = 300
+static paddingSpace : int = 10
+static scene2DDebugEnabled : boolean = false
+static music : Music

+static setBackgroundTexture(file : String) : void
+static setSkin(file : String) : void
+static setMusic(file : String) : void
+static setBackgroundOfTable(table : Table) : void
+static makeLabel(text : String, fontSize : int) : Label
+static makeExitWindow() : Dialog
+static makeMusicControlWindow() : Dialog
+static makeGameSavedWindow() : Dialog
}

class TiledMapUtil {
+static parseSlingShot(world : World, objects : MapObjects, isStatic : boolean) : SlingShot
+static parseBoundary(world : World, objects : MapObjects, isStatic : boolean) : void
+static parseFloor(world : World, objects : MapObjects, isStatic : boolean) : void
+static parseMaterial(world : World, objects : MapObjects, type : int) : ArrayList<Material>
+static parsePigs(world : World, objects : MapObjects, isStatic : boolean, type : int) : ArrayList<Pig>
+static parseBird(world : World, objects : MapObjects, type : int) : ArrayList<Bird>
+static createPolygonShape(polygonObject : PolygonMapObject) : PolygonShape
-static createChainShape(polyline : PolylineMapObject) : ChainShape
}

class SlingShotUtil {
+static calculateEuclideanDistance(x1 : float, y1 : float, x2 : float, y2 : float) : float
+static calculateAngle(x1 : float, y1 : float, x2 : float, y2 : float) : float
+static drawTrajectory(shapeRenderer : ShapeRenderer, camera : OrthographicCamera, startPosition : Vector3, distance : float, gravity : Vector2) : void
}

@enduml
